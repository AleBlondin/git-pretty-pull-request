#!/usr/bin/env bash

set -e

confirm() {
    # call with a prompt string or use a default
    printf "${1:-Confirm?} [Y/n] "
    read -r response
    case "$response" in
        [nN])
            false
            ;;
        *)
            true
            ;;
    esac
}

function join() {
    local IFS="$1"; shift; echo "$*";
}

function trim() {
    sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

function prefix() {
    sed "s/^/$1 /"
}

function indent() {
    prefix "   "
}

function init() {
    rootDir=$(git rev-parse --show-toplevel)
    echo -e "Running 'git fetch --all'..."
    git fetch --all 2>&1 | prefix '|' | indent
    echo
    fetchPID=${!}
    msgFile=$rootDir/.git/PRETTY_PR_EDITMSG
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[0;33m'
    BLUE='\033[0;34m'
    NC='\033[0m'
    head=$(git rev-parse --abbrev-ref HEAD)
}

function sync_origin() {
    branch=$1
    # nothing to do if remote branch exists and is in sync
    if (git rev-parse --verify --quiet origin/$branch > /dev/null) && \
        [ x"$(git rev-parse $branch)" == x"$(git rev-parse origin/$branch)" ]; then
        true
    else
        if confirm "${YELLOW}Branch '$branch' is not in sync with 'origin/$branch'.${NC}\nDo you want me to push for you?${NC}"; then
            git push origin $branch 2>&1 | prefix '|' | indent
            echo
        else
            gracefully_abort
        fi
    fi
}

function inexistant_pull_base() {
    echo -e "${RED}The branch $1 that you're trying to use as a pull base doesn't exist${NC}"
    exit 1
}

function no_pr_message() {
    echo -e "${RED}Aborting due to empty pull request title${NC}"
    exit 1
}

function gracefully_abort() {
    echo -e "${RED}Aborted, no pull request opened${NC}"
    exit 0
}

function should_open_editor() {
   [ -e $rootDir/PULL_REQUEST_TEMPLATE ] || [ -e $rootDir/.github/PULL_REQUEST_TEMPLATE ] ||
   [ -e $rootDir/PULL_REQUEST_TEMPLATE.md ] || [ -e $rootDir/.github/PULL_REQUEST_TEMPLATE.md ]
}

function get_pull_request_message() {
    # If there's an argument, it's the PR message. Else, the message is the last commit message
    [ -z "$1" ] && msg=$(git log -1 --pretty=%B)
    [ -z "$msg" ] && msg=$1

    if ! should_open_editor; then
        echo "$msg"
        return 0
    fi

    template=$(cat $rootDir/PULL_REQUEST_TEMPLATE $rootDir/.github/PULL_REQUEST_TEMPLATE $rootDir/PULL_REQUEST_TEMPLATE.md $rootDir/.github/PULL_REQUEST_TEMPLATE.md 2> /dev/null)
    msg="$msg

$template

; Requesting a pull to branches $(join ', ' ${branches[@]})
; Please enter your pull request message above. Lines beginning with ';' will
; be ignored, and an empty message aborts the pull request opening.
; You'll be able to check your pull requests before opening
; them."
    echo "$msg" > $msgFile
    $EDITOR $msgFile < $(tty) > $(tty) # opens editor
    sed -e '/^;.*$/d' $msgFile # remove comments
}


init
sync_origin $head origin/$head

# opens editor if necessary and trim
msg=$(get_pull_request_message "$1" | trim)
[[ "$msg" = *[![:space:]]* ]] || no_pr_message
msgTitle=$(echo "$msg" | head -n 1)

remote="origin/$head"

echo -e "${BLUE}A pull request will be opened with the message:${NC}"
echo "$msg" | prefix '|' | indent
echo

# Print summary and ask confirmation
# Get the commits not yet merged on the pull base
# git log shows the latest commit at the top, Github shows it at the bottom.
# The --reverse argument reverse the order of the lines to be consistent with Github.
diff=$(git log --reverse --color --cherry --oneline origin/staging..$head\
    2> /dev/null || echo "error")
[ "$diff" = "error" ] && inexistant_pull_base "$remote"
echo -e "${BLUE}Commits:"
echo "$diff" | indent
echo

confirm || gracefully_abort

# Open pull requests
i=0
hub pull-request -m "$msg" -b staging -h $head || true
i=$[$i+1]

[ ! -e "$msgFile" ] || rm "$msgFile"

